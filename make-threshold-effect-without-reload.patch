diff --git a/sidebar.js b/sidebar.js
index 02ea53d..58b3224 100644
--- a/sidebar.js
+++ b/sidebar.js
@@ -54,6 +54,7 @@ const Sidebar = () => {
 					value: `${threshold}`,
 					onChange: v => {
 						set('s8/wheel-meta-boxes', 'threshold', parseFloat(v))
+						console.log('C H A N G E', v)
 					},
 					help: 'The amount of input needed to maximize or minimize the meta box pane.',
 					step: 25,
diff --git a/wheel-meta-boxes.js b/wheel-meta-boxes.js
index 3b8afca..0174b8a 100644
--- a/wheel-meta-boxes.js
+++ b/wheel-meta-boxes.js
@@ -21,7 +21,18 @@ subscribe( () => {
 	}
 }, editorStore)
 
-const getThreshold = () => select(preferencesStore).get('s8/wheel-meta-boxes', 'threshold')
+let staleThreshold
+subscribe( () => {
+	const threshold = select(preferencesStore).get('s8/wheel-meta-boxes', 'threshold')
+	if (!staleThreshold) staleThreshold = threshold
+	else if (threshold !== staleThreshold) {
+		getThreshold = () => threshold
+		console.log('subbed threshold', threshold, w0t.applyWheelHandling)
+		effectWheelHandling();
+	}
+}, preferencesStore)
+
+let getThreshold = () => select(preferencesStore).get('s8/wheel-meta-boxes', 'threshold')
 
 const handleWheeling = ( canvas, editorDocument = canvas.ownerDocument ) => {
 	const metaPane = editorDocument.querySelector('.edit-post-meta-boxes-main')
@@ -45,6 +56,7 @@ const handleWheeling = ( canvas, editorDocument = canvas.ownerDocument ) => {
 	metaPane.addEventListener('wheel', onMetaWheel)
 
 	const onCanvasWheel = ( { currentTarget, deltaY, deltaMode } ) => {
+		console.log('hi', getThreshold())
 		if ( deltaY >= getThreshold() ) {
 			const { scrollTop, scrollHeight, clientHeight } = currentTarget
 			// At some viewport heights the scrollHeight minus the clientHeight is a
@@ -63,8 +75,23 @@ const handleWheeling = ( canvas, editorDocument = canvas.ownerDocument ) => {
 		}
 	}
 	canvas.addEventListener('wheel', onCanvasWheel)
+
+	return () => {
+		console.log('CLEANUP')
+		metaPane.removeEventListener('wheel', onMetaWheel)
+		canvas.removeEventListener('wheel', onCanvasWheel)
+	}
 }
 
+const w0t = {
+	applyWheelHandling: () => {},
+	wheelHandlingCleanup: () => {},
+}
+const effectWheelHandling = () => {
+	w0t.wheelHandlingCleanup()
+	w0t.wheelHandlingCleanup = w0t.applyWheelHandling()
+	console.log('EFFECT wheel handling', ...Object.values(w0t))
+}
 // The way that wheel handling is added has to be different depending on whether
 // the editor canvas is iframed because wheel handling cannot be added to the
 // iframed document from the parent window. This script is executed from two
@@ -79,12 +106,14 @@ if ( ! location.href.startsWith('blob:') ) {
 			spy.disconnect();
 			if (visualEditor.matches('.is-iframed')) return
 
-			handleWheeling( document.querySelector('.block-editor-block-canvas') )
+			w0t.applyWheelHandling = () => handleWheeling( document.querySelector('.block-editor-block-canvas') )
+			effectWheelHandling()
 		}
 	})
 	spy.observe(editorContainer, {childList:true, subtree:true})
 } else {
-	handleWheeling( window.document.documentElement, window.parent.document )
+	w0t.applyWheelHandling = () => handleWheeling( window.document.documentElement, window.parent.document )
+	effectWheelHandling()
 }
 
 })()
